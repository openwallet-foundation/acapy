# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

from sphinx.domains.python import PythonDomain

sys.path.insert(0, os.path.abspath(".."))

autodoc_mock_imports = [
    "aiohttp_apispec",
    "aiohttp_cors",
    "aiohttp",
    "aioredis",
    "anoncreds",
    "aries_askar",
    "async_timeout",
    "asynctest",
    "base58",
    "configargparse",
    "dateutil",
    "deepmerge",
    "did_peer_2",
    "did_peer_4",
    "ecdsa",
    "indy_credx",
    "indy_vdr",
    "indy",
    "jsonpath_ng",
    "jwt",
    "markdown",
    "marshmallow",
    "msgpack",
    "multicodec",
    "multiformats",
    "nacl",
    "nest_asyncio",
    "packaging",
    "portalocker",
    "prompt_toolkit",
    "pydid",
    "pyld",
    "pytest",
    "pythonjsonlogger",
    "qrcode",
    "rlp",
    "sd_jwt",
    "setup",
    "typing_extensions",
    "unflatten",
    "yaml",
    "uuid_utils",
    "did_webvh",
    "canonicaljson",
]

#    "acapy_agent.tests.test_conductor",
#    "acapy_agent.tests.test_init",
#    "acapy_agent.messaging.connections.tests",
#    "acapy_agent.messaging.connections.messages.tests",
#    "acapy_agent.messaging.introduction.messages.tests"


# -- Project information -----------------------------------------------------

project = "ACA-Py"
copyright = "2025, Province of British Columbia"
author = "Province of British Columbia"

# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = ""
# with open(join(dirname(dirname(dirname(__file__))), 'VERSION.txt')) as fh_version:
#    release = fh_version.read().strip()
#    version = re.sub(r'([^\.]*\.[^\.]*).*', r'\1', release)

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.ifconfig",
    "sphinx.ext.coverage",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = [".rst"]
# source_suffix = '.rst'

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    "README.md",
    "GettingStartedAriesDev/*",
    "assets/*",
    "Poetry.md",
    "acapy_agent/*",
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# pip install -U sphinx-rtd-theme
html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {
    "**": [
        "relations.html",  # needs 'show_related': True theme option to display
        "searchbox.html",
    ]
}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "acapydoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "ACA-Py.tex",
        "ACA-Py Documentation",
        "See Contributors list on GitHub",
        "manual",
    )
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc,
        "aca-py",
        "ACA-Py Documentation",
        [author],
        1,
    )
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "ACA-Py",
        "ACA-Py Documentation",
        author,
        "A Decentralized Trust Agent implemented in Python and\
        suitable for use in (almost) any non-mobile environment.",
        "Miscellaneous",
    )
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html", "README.md"]


# -- Extension configuration -------------------------------------------------


# To supress cross-reference warnings
# https://github.com/sphinx-doc/sphinx/issues/3866#issuecomment-768167824
class PatchedPythonDomain(PythonDomain):
    def resolve_xref(self, env, fromdocname, builder, typ, target, node, contnode):
        if "refspecific" in node:
            del node["refspecific"]
        return super(PatchedPythonDomain, self).resolve_xref(
            env, fromdocname, builder, typ, target, node, contnode
        )


def setup(sphinx):
    sphinx.add_domain(PatchedPythonDomain, override=True)
