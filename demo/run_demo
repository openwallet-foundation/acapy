#!/bin/bash

shopt -s nocasematch

cd $(dirname $0)

RESOLUTION="$1"
# Check if RESOLUTION is not provided or not a valid option
if [ -z "$RESOLUTION" ] || [ "$RESOLUTION" != "build" -a "$RESOLUTION" != "run" ]; then
  echo "Resolution not specified or invalid."
  AGENT="$1"  # If RESOLUTION is not provided or invalid, assume argument is AGENT
else
  shift  # Shift only if RESOLUTION is provided and valid
  AGENT="$1"
fi
shift  # Shift again to remove AGENT from the arguments
ARGS=""

TRACE_ENABLED=""
TRACE_TAG=acapy.events
if ! [ -z "$TRACE_TARGET_URL" ]; then
  TRACE_TARGET=http://${TRACE_TARGET_URL}/
else
  TRACE_TARGET=log
fi
WEBHOOK_TARGET=""
if [ -z "$DOCKER_NET" ]; then
  DOCKER_NET="bridge"
fi
DOCKER_VOL=""

# Set default platform to linux/amd64 when running on Arm based MAC since there are no arm based images available currently.
# Must also use the Rosetta 2 software, which can be installed by running `softwareupdate --install-rosetta` from the Mac command line
if [[ $OSTYPE == 'darwin'* ]]; then
  architecture=$(uname -m)
  if [[ "${architecture}" == 'arm'* ]] || [[ "${architecture}" == 'aarch'* ]]; then
    export DOCKER_DEFAULT_PLATFORM=linux/amd64
  fi
fi

j=1
for i in "$@"
do
  ((j++))
  # Demo agent with --multitenant requires the ../log dir to exist and write access to it
  if [ ! -d "../log" ]; then
    mkdir ../log && chmod -R uga+rws ../log
    DOCKER_VOL="${DOCKER_VOL} -v /$(pwd)/../log:/home/aries/log"
  fi
  if [ ! -z "$SKIP" ]; then
    SKIP=""
    continue
  fi
  case $i in
  --events)
    if [ "${AGENT}" = "performance" ]; then
      echo -e "\nIgnoring the \"--events\" option when running the ${AGENT} agent.\n"
    else
      EVENTS=1
    fi
    continue
  ;;
    --self-attested)
      SELF_ATTESTED=1
      continue
    ;;
    --trace-log)
      TRACE_ENABLED=1
      TRACE_TARGET=log
      TRACE_TAG=acapy.events
      continue
    ;;
    --trace-http)
      TRACE_ENABLED=1
      TRACE_TARGET=http://${TRACE_TARGET_URL}/
      TRACE_TAG=acapy.events
      continue
    ;;
    --webhook-url)
      WEBHOOK_TARGET=http://${WEBHOOK_URL}
      continue
    ;;
    --debug-ptvsd)
      ENABLE_PTVSD=1
      continue
    ;;
    --debug-pycharm)
      ENABLE_PYDEVD_PYCHARM=1
      continue
    ;;
    --debug-pycharm-controller-port)
      PYDEVD_PYCHARM_CONTROLLER_PORT=${!j}
      SKIP=1
      continue
    ;;
    --debug-pycharm-agent-port)
      PYDEVD_PYCHARM_AGENT_PORT=${!j}
      SKIP=1
      continue
    ;;
  --timing)
    if [ "$(ls -ld ../log | grep dr..r..rwx)" == "" ]; then
      echo "Error: To use the --timing parameter, the directory '../log' must exist and all users must be able to write to it."
      echo "For example, to create the directory and then set the permissions use: 'mkdir ../log; chmod uga+rws ../log'"
      exit 1
    fi
    continue
  ;;
  --bg)
    if [ "${AGENT}" = "alice" ] || [ "${AGENT}" = "faber" ] || [ "${AGENT}" = "acme" ]; then
      DOCKER_OPTS="-d"
      echo -e "\nRunning in ${AGENT} in the background. Note that you cannot use the command line console in this mode."
      echo To see the logs use: \"docker logs ${AGENT}\".
      echo While viewing logs, hit CTRL-C to return to the command line.
      echo To stop the agent, use: \"docker stop ${AGENT}\". The docker environment will
      echo -e "be removed on stop.\n\n"
    else
      echo The "bg" option \(for running docker in detached mode\) is only for agents Alice, Faber and Acme.
      echo Ignoring...
    fi
    continue
  ;;
  --help)
    cat <<EOF

Usage:
   ./demo_run <resolution> <agent> [OPTIONS]

   - <resolution> is one of the docker option to build or run.
   - <agent> is one of alice, faber, acme, performance.
   - Options:
      --events - display on the terminal the webhook events from the ACA-Py agent.
      --timing - at the end of the run, display timing; relevant to the "performance" agent.
      --bg - run the agent in the background; for use when using OpenAPI/Swagger interface
          --trace-log - log trace events to the standard log file
          --trace-http - log trace events to an http endpoint specified in env var TRACE_TARGET_URL
          --self-attested - include a self-attested attribute in the proof request/response
          --webhook-url - send events to an http endpoint specified in env var WEBHOOK_URL
      debug options: --debug-pycharm-agent-port <port>; --debug-pycharm-controller-port <port>
                    --debug-pycharm; --debug-ptvsd

EOF
    exit 0
  ;;
  esac
  ARGS="${ARGS:+$ARGS }$i"
done

if [ -z "$RESOLUTION" ]; then
  echo "Resolution not specified."
elif [ "$RESOLUTION" = "build" ]; then
  DOCKER_RESOLUTION="build"
  echo "Agent will be build."
elif [ "$RESOLUTION" = "run" ]; then
  DOCKER_RESOLUTION="run"
  echo "Agent will be run."
else
  echo "You can utilize the 'build' option to build the agent or the 'run' option to run the agent."
fi


if [ "$AGENT" = "faber" ]; then
  AGENT_MODULE="faber"
  AGENT_PORT=8020
  AGENT_PORT_RANGE=8020-8029
elif [ "$AGENT" = "alice" ]; then
  AGENT_MODULE="alice"
  AGENT_PORT=8030
  AGENT_PORT_RANGE=8030-8039
elif [ "$AGENT" = "acme" ]; then
  AGENT_MODULE="acme"
  AGENT_PORT=8040
  AGENT_PORT_RANGE=8040-8049
elif [ "$AGENT" = "performance" ]; then
  AGENT_MODULE="performance"
  AGENT_PORT=8050
  AGENT_PORT_RANGE=8050-8069
else
  echo "Please specify which agent you want to run. Choose from 'faber', 'alice', 'acme', or 'performance'."
  exit 1
fi
# allow override for agent ports
if [ ! -z "$AGENT_PORT_OVERRIDE" ]; then
  AGENT_PORT=$AGENT_PORT_OVERRIDE
  AGENT_PORT_END=$(expr $AGENT_PORT_OVERRIDE + 9)
  AGENT_PORT_RANGE="$AGENT_PORT-$AGENT_PORT_END"
fi

# 1. Build the agent image
if [ -z "$DOCKER_RESOLUTION" ] || [ "$DOCKER_RESOLUTION" = "build" ]; then
  echo "Preparing agent image..."
  docker build -t acapy-base -f ../docker/Dockerfile .. || exit 1
  docker build -t faber-alice-demo -f ../docker/Dockerfile.demo --build-arg from_image=acapy-base .. || exit 1
fi

if [ "$DOCKER_RESOLUTION" = "build" ]; then
  exit 1
else
  echo "You can utilize the 'build' option to build the agent or the 'run' option to run the agent."
fi

if [ ! -z "$DOCKERHOST" ]; then
  # provided via APPLICATION_URL environment variable
  export RUNMODE="docker"
elif [ -z "${PWD_HOST_FQDN}" ]; then
  # getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
  . /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))"
  export DOCKERHOST=$(getDockerHost)
  export RUNMODE="docker"
else
  PWD_HOST="${PWD_HOST_FQDN}"
  if [ "$PWD_HOST_FQDN" = "labs.play-with-docker.com" ]; then
    export ETH_CONFIG="eth1"
  elif [ "$PWD_HOST_FQDN" = "play-with-docker.vonx.io" ]; then
    export ETH_CONFIG="eth0"
  else
    export ETH_CONFIG="eth0"
  fi
  MY_HOST=`ifconfig ${ETH_CONFIG} | grep inet | cut -d':' -f2 | cut -d' ' -f1 | sed 's/\./\-/g'`
  export DOCKERHOST="ip${MY_HOST}-${SESSION_ID}-{PORT}.direct.${PWD_HOST_FQDN}"
  export RUNMODE="pwd"
fi

if [ "$RUNMODE" == "docker" ]; then
  echo "Checking ngrok service endpoints"
  JQ=${JQ:-`which jq`}
  if [ -x "$JQ" ]; then
    NGROK_CURL="curl --silent localhost:4040/api/tunnels"
    # check if ngrok is running on our $AGENT_PORT (don't override if AGENT_ENDPOINT is already set)
    if [ -z "$AGENT_ENDPOINT" ]; then
      # default behavior is to use the first tunnel as the agent endpoint
      NGROK_ENDPOINT=$($NGROK_CURL | $JQ -r '.tunnels[0].public_url')
      # ngrok does not guarantee the order that the API returns the tunnels,
      # so use the named endpoint if it exists.
      NAMED_ENDPOINT=$($NGROK_CURL | $JQ -r '.tunnels[] | select(.name=="acapy-agent") | .public_url')
      if ! [ -z "$NAMED_ENDPOINT" ]; then
        NGROK_ENDPOINT=$NAMED_ENDPOINT  # use the endpoint specified by name
      fi
      if [ -z "$NGROK_ENDPOINT" ] || [ "$NGROK_ENDPOINT" = "null" ]; then
        echo "ngrok not detected for agent endpoint"
      else
        export AGENT_ENDPOINT=$NGROK_ENDPOINT
        echo "Detected ngrok agent endpoint [$AGENT_ENDPOINT]"
      fi
    fi
    # check if ngrok is running for webhooks (don't override if WEBHOOK_TARGET is already set)
    if [ -z "$WEBHOOK_TARGET"]; then  # webhook target not specified, see if ngrok lists it by name
      NAMED_ENDPOINT=$($NGROK_CURL | $JQ -r '.tunnels[] | select(.name=="acapy-webhooks") | .public_url')
      if [ -z "$NAMED_ENDPOINT" ]; then
        echo "ngrok not detected for webhooks endpoint"
      else
        export WEBHOOK_TARGET=${NAMED_ENDPOINT}/webhooks
        echo "Detected ngrok webhooks endpoint [$WEBHOOK_TARGET]"
      fi
    fi
    # check if ngrok is running for tails-server (don't override if TAILS_NETWORK or PUBLIC_TAILS_URL is already set)
    if [ -z "$TAILS_NETWORK" ] && [ -z "$PUBLIC_TAILS_URL" ]; then # tails-server not specified, see if ngrok lists it by name
      NAMED_ENDPOINT=$($NGROK_CURL | $JQ -r '.tunnels[] | select(.name=="tails-server") | .public_url')
      if [ -z "$NAMED_ENDPOINT" ]; then
        echo "ngrok not detected for tails-server endpoint"
      else
        export PUBLIC_TAILS_URL=${NAMED_ENDPOINT}
        echo "Detected ngrok tails-server endpoint [$PUBLIC_TAILS_URL]"
      fi
    fi
  else
    echo "jq not found"
  fi
fi

echo "DOCKERHOST=$DOCKERHOST"

DOCKER_ENV="-e LOG_LEVEL=${LOG_LEVEL} -e RUNMODE=${RUNMODE} -e DOCKERHOST=${DOCKERHOST}"
if ! [ -z "$AGENT_PORT" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e AGENT_PORT=${AGENT_PORT}"
fi
if ! [ -z "$POSTGRES" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e POSTGRES=1 -e RUST_BACKTRACE=1"
fi
if ! [ -z "$LEDGER_URL" ]; then
  GENESIS_URL="${LEDGER_URL}/genesis"
  DOCKER_ENV="${DOCKER_ENV} -e LEDGER_URL=${LEDGER_URL}"
fi
if ! [ -z "$GENESIS_URL" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e GENESIS_URL=${GENESIS_URL}"
fi
if ! [ -z "$AGENT_ENDPOINT" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e AGENT_ENDPOINT=${AGENT_ENDPOINT}"
fi
if ! [ -z "$EVENTS" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e EVENTS=1"
fi
if ! [ -z "$SELF_ATTESTED" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e SELF_ATTESTED=${SELF_ATTESTED}"
fi
if ! [ -z "$TRACE_TARGET" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e TRACE_TARGET=${TRACE_TARGET}"
  DOCKER_ENV="${DOCKER_ENV} -e TRACE_TAG=${TRACE_TAG}"
  DOCKER_ENV="${DOCKER_ENV} -e TRACE_ENABLED=${TRACE_ENABLED}"
fi
if ! [ -z "$WEBHOOK_TARGET" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e WEBHOOK_TARGET=${WEBHOOK_TARGET}"
fi
if ! [ -z "$ACAPY_DEBUG_WEBHOOKS" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e ACAPY_DEBUG_WEBHOOKS=${ACAPY_DEBUG_WEBHOOKS}"
fi
# if $TAILS_NETWORK is specified it will override any previously specified $DOCKER_NET
if ! [ -z "$TAILS_NETWORK" ]; then
  DOCKER_NET="${TAILS_NETWORK}"
  DOCKER_ENV="${DOCKER_ENV} -e TAILS_NETWORK=${TAILS_NETWORK}"
  DOCKER_ENV="${DOCKER_ENV} -e TAILS_NGROK_NAME=ngrok-tails-server"
fi
if ! [ -z "$PUBLIC_TAILS_URL" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e PUBLIC_TAILS_URL=${PUBLIC_TAILS_URL}"
fi
if ! [ -z "$TAILS_FILE_COUNT" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e TAILS_FILE_COUNT=${TAILS_FILE_COUNT}"
fi
if ! [ -z "$ACAPY_ARG_FILE" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e ACAPY_ARG_FILE=${ACAPY_ARG_FILE}"
fi
if ! [ -z "$DEMO_EXTRA_AGENT_ARGS" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e DEMO_EXTRA_AGENT_ARGS=${DEMO_EXTRA_AGENT_ARGS}"
fi

if ! [ -z "${ENABLE_PYDEVD_PYCHARM}" ]; then
  DOCKER_ENV="${DOCKER_ENV} -e ENABLE_PYDEVD_PYCHARM=${ENABLE_PYDEVD_PYCHARM} -e PYDEVD_PYCHARM_CONTROLLER_PORT=${PYDEVD_PYCHARM_CONTROLLER_PORT} -e PYDEVD_PYCHARM_AGENT_PORT=${PYDEVD_PYCHARM_AGENT_PORT}"
fi

echo "DOCKER_ENV=$DOCKER_ENV"

# on Windows, docker run needs to be prefixed by winpty
if [ "$OSTYPE" = "msys" ]; then
  DOCKER="winpty docker"
fi
DOCKER=${DOCKER:-docker}

$DOCKER run --name $AGENT --rm -it ${DOCKER_OPTS} \
    --network=${DOCKER_NET} \
    -p 0.0.0.0:$AGENT_PORT_RANGE:$AGENT_PORT_RANGE \
    ${DOCKER_VOL} \
    $(if [ "$DOCKER_RESOLUTION" = "run" ]; then
      echo "-v $(pwd)/../acapy_agent:/home/aries/acapy_agent \
      -v $(pwd)/../scripts:/home/aries/scripts \
      -v $(pwd)/../demo:/home/aries/demo"
    fi) \
    $DOCKER_ENV \
    faber-alice-demo $AGENT_MODULE --port $AGENT_PORT $ARGS